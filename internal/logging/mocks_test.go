// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logging

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotificationSender creates a new instance of MockNotificationSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationSender(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNotificationSender {
	mock := &MockNotificationSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationSender is an autogenerated mock type for the NotificationSender type
type MockNotificationSender struct {
	mock.Mock
}

type MockNotificationSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationSender) EXPECT() *MockNotificationSender_Expecter {
	return &MockNotificationSender_Expecter{mock: &_m.Mock}
}

// SendNotificationToAllClients provides a mock function for the type MockNotificationSender
func (_mock *MockNotificationSender) SendNotificationToAllClients(method string, params map[string]any) {
	_mock.Called(method, params)
	return
}

// MockNotificationSender_SendNotificationToAllClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotificationToAllClients'
type MockNotificationSender_SendNotificationToAllClients_Call struct {
	*mock.Call
}

// SendNotificationToAllClients is a helper method to define mock.On call
//   - method string
//   - params map[string]any
func (_e *MockNotificationSender_Expecter) SendNotificationToAllClients(method interface{}, params interface{}) *MockNotificationSender_SendNotificationToAllClients_Call {
	return &MockNotificationSender_SendNotificationToAllClients_Call{Call: _e.mock.On("SendNotificationToAllClients", method, params)}
}

func (_c *MockNotificationSender_SendNotificationToAllClients_Call) Run(run func(method string, params map[string]any)) *MockNotificationSender_SendNotificationToAllClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationSender_SendNotificationToAllClients_Call) Return() *MockNotificationSender_SendNotificationToAllClients_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotificationSender_SendNotificationToAllClients_Call) RunAndReturn(run func(method string, params map[string]any)) *MockNotificationSender_SendNotificationToAllClients_Call {
	_c.Run(run)
	return _c
}
