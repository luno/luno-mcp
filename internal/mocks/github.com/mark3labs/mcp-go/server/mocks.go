// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package server

import (
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientSession creates a new instance of MockClientSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientSession(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockClientSession {
	mock := &MockClientSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientSession is an autogenerated mock type for the ClientSession type
type MockClientSession struct {
	mock.Mock
}

type MockClientSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientSession) EXPECT() *MockClientSession_Expecter {
	return &MockClientSession_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function for the type MockClientSession
func (_mock *MockClientSession) Initialize() {
	_mock.Called()
	return
}

// MockClientSession_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockClientSession_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockClientSession_Expecter) Initialize() *MockClientSession_Initialize_Call {
	return &MockClientSession_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockClientSession_Initialize_Call) Run(run func()) *MockClientSession_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientSession_Initialize_Call) Return() *MockClientSession_Initialize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientSession_Initialize_Call) RunAndReturn(run func()) *MockClientSession_Initialize_Call {
	_c.Run(run)
	return _c
}

// Initialized provides a mock function for the type MockClientSession
func (_mock *MockClientSession) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockClientSession_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockClientSession_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockClientSession_Expecter) Initialized() *MockClientSession_Initialized_Call {
	return &MockClientSession_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockClientSession_Initialized_Call) Run(run func()) *MockClientSession_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientSession_Initialized_Call) Return(b bool) *MockClientSession_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockClientSession_Initialized_Call) RunAndReturn(run func() bool) *MockClientSession_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// NotificationChannel provides a mock function for the type MockClientSession
func (_mock *MockClientSession) NotificationChannel() chan<- mcp.JSONRPCNotification {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotificationChannel")
	}

	var r0 chan<- mcp.JSONRPCNotification
	if returnFunc, ok := ret.Get(0).(func() chan<- mcp.JSONRPCNotification); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- mcp.JSONRPCNotification)
		}
	}
	return r0
}

// MockClientSession_NotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotificationChannel'
type MockClientSession_NotificationChannel_Call struct {
	*mock.Call
}

// NotificationChannel is a helper method to define mock.On call
func (_e *MockClientSession_Expecter) NotificationChannel() *MockClientSession_NotificationChannel_Call {
	return &MockClientSession_NotificationChannel_Call{Call: _e.mock.On("NotificationChannel")}
}

func (_c *MockClientSession_NotificationChannel_Call) Run(run func()) *MockClientSession_NotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientSession_NotificationChannel_Call) Return(jSONRPCNotificationCh chan<- mcp.JSONRPCNotification) *MockClientSession_NotificationChannel_Call {
	_c.Call.Return(jSONRPCNotificationCh)
	return _c
}

func (_c *MockClientSession_NotificationChannel_Call) RunAndReturn(run func() chan<- mcp.JSONRPCNotification) *MockClientSession_NotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SessionID provides a mock function for the type MockClientSession
func (_mock *MockClientSession) SessionID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockClientSession_SessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionID'
type MockClientSession_SessionID_Call struct {
	*mock.Call
}

// SessionID is a helper method to define mock.On call
func (_e *MockClientSession_Expecter) SessionID() *MockClientSession_SessionID_Call {
	return &MockClientSession_SessionID_Call{Call: _e.mock.On("SessionID")}
}

func (_c *MockClientSession_SessionID_Call) Run(run func()) *MockClientSession_SessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClientSession_SessionID_Call) Return(s string) *MockClientSession_SessionID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockClientSession_SessionID_Call) RunAndReturn(run func() string) *MockClientSession_SessionID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionWithLogging creates a new instance of MockSessionWithLogging. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionWithLogging(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSessionWithLogging {
	mock := &MockSessionWithLogging{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionWithLogging is an autogenerated mock type for the SessionWithLogging type
type MockSessionWithLogging struct {
	mock.Mock
}

type MockSessionWithLogging_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionWithLogging) EXPECT() *MockSessionWithLogging_Expecter {
	return &MockSessionWithLogging_Expecter{mock: &_m.Mock}
}

// GetLogLevel provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) GetLogLevel() mcp.LoggingLevel {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogLevel")
	}

	var r0 mcp.LoggingLevel
	if returnFunc, ok := ret.Get(0).(func() mcp.LoggingLevel); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(mcp.LoggingLevel)
	}
	return r0
}

// MockSessionWithLogging_GetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogLevel'
type MockSessionWithLogging_GetLogLevel_Call struct {
	*mock.Call
}

// GetLogLevel is a helper method to define mock.On call
func (_e *MockSessionWithLogging_Expecter) GetLogLevel() *MockSessionWithLogging_GetLogLevel_Call {
	return &MockSessionWithLogging_GetLogLevel_Call{Call: _e.mock.On("GetLogLevel")}
}

func (_c *MockSessionWithLogging_GetLogLevel_Call) Run(run func()) *MockSessionWithLogging_GetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithLogging_GetLogLevel_Call) Return(loggingLevel mcp.LoggingLevel) *MockSessionWithLogging_GetLogLevel_Call {
	_c.Call.Return(loggingLevel)
	return _c
}

func (_c *MockSessionWithLogging_GetLogLevel_Call) RunAndReturn(run func() mcp.LoggingLevel) *MockSessionWithLogging_GetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) Initialize() {
	_mock.Called()
	return
}

// MockSessionWithLogging_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockSessionWithLogging_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockSessionWithLogging_Expecter) Initialize() *MockSessionWithLogging_Initialize_Call {
	return &MockSessionWithLogging_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockSessionWithLogging_Initialize_Call) Run(run func()) *MockSessionWithLogging_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithLogging_Initialize_Call) Return() *MockSessionWithLogging_Initialize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithLogging_Initialize_Call) RunAndReturn(run func()) *MockSessionWithLogging_Initialize_Call {
	_c.Run(run)
	return _c
}

// Initialized provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockSessionWithLogging_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockSessionWithLogging_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockSessionWithLogging_Expecter) Initialized() *MockSessionWithLogging_Initialized_Call {
	return &MockSessionWithLogging_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockSessionWithLogging_Initialized_Call) Run(run func()) *MockSessionWithLogging_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithLogging_Initialized_Call) Return(b bool) *MockSessionWithLogging_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockSessionWithLogging_Initialized_Call) RunAndReturn(run func() bool) *MockSessionWithLogging_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// NotificationChannel provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) NotificationChannel() chan<- mcp.JSONRPCNotification {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotificationChannel")
	}

	var r0 chan<- mcp.JSONRPCNotification
	if returnFunc, ok := ret.Get(0).(func() chan<- mcp.JSONRPCNotification); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- mcp.JSONRPCNotification)
		}
	}
	return r0
}

// MockSessionWithLogging_NotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotificationChannel'
type MockSessionWithLogging_NotificationChannel_Call struct {
	*mock.Call
}

// NotificationChannel is a helper method to define mock.On call
func (_e *MockSessionWithLogging_Expecter) NotificationChannel() *MockSessionWithLogging_NotificationChannel_Call {
	return &MockSessionWithLogging_NotificationChannel_Call{Call: _e.mock.On("NotificationChannel")}
}

func (_c *MockSessionWithLogging_NotificationChannel_Call) Run(run func()) *MockSessionWithLogging_NotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithLogging_NotificationChannel_Call) Return(jSONRPCNotificationCh chan<- mcp.JSONRPCNotification) *MockSessionWithLogging_NotificationChannel_Call {
	_c.Call.Return(jSONRPCNotificationCh)
	return _c
}

func (_c *MockSessionWithLogging_NotificationChannel_Call) RunAndReturn(run func() chan<- mcp.JSONRPCNotification) *MockSessionWithLogging_NotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SessionID provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) SessionID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSessionWithLogging_SessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionID'
type MockSessionWithLogging_SessionID_Call struct {
	*mock.Call
}

// SessionID is a helper method to define mock.On call
func (_e *MockSessionWithLogging_Expecter) SessionID() *MockSessionWithLogging_SessionID_Call {
	return &MockSessionWithLogging_SessionID_Call{Call: _e.mock.On("SessionID")}
}

func (_c *MockSessionWithLogging_SessionID_Call) Run(run func()) *MockSessionWithLogging_SessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithLogging_SessionID_Call) Return(s string) *MockSessionWithLogging_SessionID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSessionWithLogging_SessionID_Call) RunAndReturn(run func() string) *MockSessionWithLogging_SessionID_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogLevel provides a mock function for the type MockSessionWithLogging
func (_mock *MockSessionWithLogging) SetLogLevel(level mcp.LoggingLevel) {
	_mock.Called(level)
	return
}

// MockSessionWithLogging_SetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogLevel'
type MockSessionWithLogging_SetLogLevel_Call struct {
	*mock.Call
}

// SetLogLevel is a helper method to define mock.On call
//   - level mcp.LoggingLevel
func (_e *MockSessionWithLogging_Expecter) SetLogLevel(level interface{}) *MockSessionWithLogging_SetLogLevel_Call {
	return &MockSessionWithLogging_SetLogLevel_Call{Call: _e.mock.On("SetLogLevel", level)}
}

func (_c *MockSessionWithLogging_SetLogLevel_Call) Run(run func(level mcp.LoggingLevel)) *MockSessionWithLogging_SetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mcp.LoggingLevel
		if args[0] != nil {
			arg0 = args[0].(mcp.LoggingLevel)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionWithLogging_SetLogLevel_Call) Return() *MockSessionWithLogging_SetLogLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithLogging_SetLogLevel_Call) RunAndReturn(run func(level mcp.LoggingLevel)) *MockSessionWithLogging_SetLogLevel_Call {
	_c.Run(run)
	return _c
}

// NewMockSessionWithTools creates a new instance of MockSessionWithTools. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionWithTools(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSessionWithTools {
	mock := &MockSessionWithTools{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionWithTools is an autogenerated mock type for the SessionWithTools type
type MockSessionWithTools struct {
	mock.Mock
}

type MockSessionWithTools_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionWithTools) EXPECT() *MockSessionWithTools_Expecter {
	return &MockSessionWithTools_Expecter{mock: &_m.Mock}
}

// GetSessionTools provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) GetSessionTools() map[string]server.ServerTool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSessionTools")
	}

	var r0 map[string]server.ServerTool
	if returnFunc, ok := ret.Get(0).(func() map[string]server.ServerTool); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]server.ServerTool)
		}
	}
	return r0
}

// MockSessionWithTools_GetSessionTools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionTools'
type MockSessionWithTools_GetSessionTools_Call struct {
	*mock.Call
}

// GetSessionTools is a helper method to define mock.On call
func (_e *MockSessionWithTools_Expecter) GetSessionTools() *MockSessionWithTools_GetSessionTools_Call {
	return &MockSessionWithTools_GetSessionTools_Call{Call: _e.mock.On("GetSessionTools")}
}

func (_c *MockSessionWithTools_GetSessionTools_Call) Run(run func()) *MockSessionWithTools_GetSessionTools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithTools_GetSessionTools_Call) Return(stringToServerTool map[string]server.ServerTool) *MockSessionWithTools_GetSessionTools_Call {
	_c.Call.Return(stringToServerTool)
	return _c
}

func (_c *MockSessionWithTools_GetSessionTools_Call) RunAndReturn(run func() map[string]server.ServerTool) *MockSessionWithTools_GetSessionTools_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) Initialize() {
	_mock.Called()
	return
}

// MockSessionWithTools_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockSessionWithTools_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockSessionWithTools_Expecter) Initialize() *MockSessionWithTools_Initialize_Call {
	return &MockSessionWithTools_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockSessionWithTools_Initialize_Call) Run(run func()) *MockSessionWithTools_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithTools_Initialize_Call) Return() *MockSessionWithTools_Initialize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithTools_Initialize_Call) RunAndReturn(run func()) *MockSessionWithTools_Initialize_Call {
	_c.Run(run)
	return _c
}

// Initialized provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockSessionWithTools_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockSessionWithTools_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockSessionWithTools_Expecter) Initialized() *MockSessionWithTools_Initialized_Call {
	return &MockSessionWithTools_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockSessionWithTools_Initialized_Call) Run(run func()) *MockSessionWithTools_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithTools_Initialized_Call) Return(b bool) *MockSessionWithTools_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockSessionWithTools_Initialized_Call) RunAndReturn(run func() bool) *MockSessionWithTools_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// NotificationChannel provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) NotificationChannel() chan<- mcp.JSONRPCNotification {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotificationChannel")
	}

	var r0 chan<- mcp.JSONRPCNotification
	if returnFunc, ok := ret.Get(0).(func() chan<- mcp.JSONRPCNotification); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- mcp.JSONRPCNotification)
		}
	}
	return r0
}

// MockSessionWithTools_NotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotificationChannel'
type MockSessionWithTools_NotificationChannel_Call struct {
	*mock.Call
}

// NotificationChannel is a helper method to define mock.On call
func (_e *MockSessionWithTools_Expecter) NotificationChannel() *MockSessionWithTools_NotificationChannel_Call {
	return &MockSessionWithTools_NotificationChannel_Call{Call: _e.mock.On("NotificationChannel")}
}

func (_c *MockSessionWithTools_NotificationChannel_Call) Run(run func()) *MockSessionWithTools_NotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithTools_NotificationChannel_Call) Return(jSONRPCNotificationCh chan<- mcp.JSONRPCNotification) *MockSessionWithTools_NotificationChannel_Call {
	_c.Call.Return(jSONRPCNotificationCh)
	return _c
}

func (_c *MockSessionWithTools_NotificationChannel_Call) RunAndReturn(run func() chan<- mcp.JSONRPCNotification) *MockSessionWithTools_NotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SessionID provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) SessionID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSessionWithTools_SessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionID'
type MockSessionWithTools_SessionID_Call struct {
	*mock.Call
}

// SessionID is a helper method to define mock.On call
func (_e *MockSessionWithTools_Expecter) SessionID() *MockSessionWithTools_SessionID_Call {
	return &MockSessionWithTools_SessionID_Call{Call: _e.mock.On("SessionID")}
}

func (_c *MockSessionWithTools_SessionID_Call) Run(run func()) *MockSessionWithTools_SessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithTools_SessionID_Call) Return(s string) *MockSessionWithTools_SessionID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSessionWithTools_SessionID_Call) RunAndReturn(run func() string) *MockSessionWithTools_SessionID_Call {
	_c.Call.Return(run)
	return _c
}

// SetSessionTools provides a mock function for the type MockSessionWithTools
func (_mock *MockSessionWithTools) SetSessionTools(tools map[string]server.ServerTool) {
	_mock.Called(tools)
	return
}

// MockSessionWithTools_SetSessionTools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionTools'
type MockSessionWithTools_SetSessionTools_Call struct {
	*mock.Call
}

// SetSessionTools is a helper method to define mock.On call
//   - tools map[string]server.ServerTool
func (_e *MockSessionWithTools_Expecter) SetSessionTools(tools interface{}) *MockSessionWithTools_SetSessionTools_Call {
	return &MockSessionWithTools_SetSessionTools_Call{Call: _e.mock.On("SetSessionTools", tools)}
}

func (_c *MockSessionWithTools_SetSessionTools_Call) Run(run func(tools map[string]server.ServerTool)) *MockSessionWithTools_SetSessionTools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]server.ServerTool
		if args[0] != nil {
			arg0 = args[0].(map[string]server.ServerTool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionWithTools_SetSessionTools_Call) Return() *MockSessionWithTools_SetSessionTools_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithTools_SetSessionTools_Call) RunAndReturn(run func(tools map[string]server.ServerTool)) *MockSessionWithTools_SetSessionTools_Call {
	_c.Run(run)
	return _c
}

// NewMockSessionWithClientInfo creates a new instance of MockSessionWithClientInfo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionWithClientInfo(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSessionWithClientInfo {
	mock := &MockSessionWithClientInfo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionWithClientInfo is an autogenerated mock type for the SessionWithClientInfo type
type MockSessionWithClientInfo struct {
	mock.Mock
}

type MockSessionWithClientInfo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionWithClientInfo) EXPECT() *MockSessionWithClientInfo_Expecter {
	return &MockSessionWithClientInfo_Expecter{mock: &_m.Mock}
}

// GetClientInfo provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) GetClientInfo() mcp.Implementation {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientInfo")
	}

	var r0 mcp.Implementation
	if returnFunc, ok := ret.Get(0).(func() mcp.Implementation); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(mcp.Implementation)
	}
	return r0
}

// MockSessionWithClientInfo_GetClientInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientInfo'
type MockSessionWithClientInfo_GetClientInfo_Call struct {
	*mock.Call
}

// GetClientInfo is a helper method to define mock.On call
func (_e *MockSessionWithClientInfo_Expecter) GetClientInfo() *MockSessionWithClientInfo_GetClientInfo_Call {
	return &MockSessionWithClientInfo_GetClientInfo_Call{Call: _e.mock.On("GetClientInfo")}
}

func (_c *MockSessionWithClientInfo_GetClientInfo_Call) Run(run func()) *MockSessionWithClientInfo_GetClientInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithClientInfo_GetClientInfo_Call) Return(implementation mcp.Implementation) *MockSessionWithClientInfo_GetClientInfo_Call {
	_c.Call.Return(implementation)
	return _c
}

func (_c *MockSessionWithClientInfo_GetClientInfo_Call) RunAndReturn(run func() mcp.Implementation) *MockSessionWithClientInfo_GetClientInfo_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) Initialize() {
	_mock.Called()
	return
}

// MockSessionWithClientInfo_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockSessionWithClientInfo_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockSessionWithClientInfo_Expecter) Initialize() *MockSessionWithClientInfo_Initialize_Call {
	return &MockSessionWithClientInfo_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockSessionWithClientInfo_Initialize_Call) Run(run func()) *MockSessionWithClientInfo_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithClientInfo_Initialize_Call) Return() *MockSessionWithClientInfo_Initialize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithClientInfo_Initialize_Call) RunAndReturn(run func()) *MockSessionWithClientInfo_Initialize_Call {
	_c.Run(run)
	return _c
}

// Initialized provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockSessionWithClientInfo_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockSessionWithClientInfo_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockSessionWithClientInfo_Expecter) Initialized() *MockSessionWithClientInfo_Initialized_Call {
	return &MockSessionWithClientInfo_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockSessionWithClientInfo_Initialized_Call) Run(run func()) *MockSessionWithClientInfo_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithClientInfo_Initialized_Call) Return(b bool) *MockSessionWithClientInfo_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockSessionWithClientInfo_Initialized_Call) RunAndReturn(run func() bool) *MockSessionWithClientInfo_Initialized_Call {
	_c.Call.Return(run)
	return _c
}

// NotificationChannel provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) NotificationChannel() chan<- mcp.JSONRPCNotification {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotificationChannel")
	}

	var r0 chan<- mcp.JSONRPCNotification
	if returnFunc, ok := ret.Get(0).(func() chan<- mcp.JSONRPCNotification); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- mcp.JSONRPCNotification)
		}
	}
	return r0
}

// MockSessionWithClientInfo_NotificationChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotificationChannel'
type MockSessionWithClientInfo_NotificationChannel_Call struct {
	*mock.Call
}

// NotificationChannel is a helper method to define mock.On call
func (_e *MockSessionWithClientInfo_Expecter) NotificationChannel() *MockSessionWithClientInfo_NotificationChannel_Call {
	return &MockSessionWithClientInfo_NotificationChannel_Call{Call: _e.mock.On("NotificationChannel")}
}

func (_c *MockSessionWithClientInfo_NotificationChannel_Call) Run(run func()) *MockSessionWithClientInfo_NotificationChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithClientInfo_NotificationChannel_Call) Return(jSONRPCNotificationCh chan<- mcp.JSONRPCNotification) *MockSessionWithClientInfo_NotificationChannel_Call {
	_c.Call.Return(jSONRPCNotificationCh)
	return _c
}

func (_c *MockSessionWithClientInfo_NotificationChannel_Call) RunAndReturn(run func() chan<- mcp.JSONRPCNotification) *MockSessionWithClientInfo_NotificationChannel_Call {
	_c.Call.Return(run)
	return _c
}

// SessionID provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) SessionID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSessionWithClientInfo_SessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionID'
type MockSessionWithClientInfo_SessionID_Call struct {
	*mock.Call
}

// SessionID is a helper method to define mock.On call
func (_e *MockSessionWithClientInfo_Expecter) SessionID() *MockSessionWithClientInfo_SessionID_Call {
	return &MockSessionWithClientInfo_SessionID_Call{Call: _e.mock.On("SessionID")}
}

func (_c *MockSessionWithClientInfo_SessionID_Call) Run(run func()) *MockSessionWithClientInfo_SessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionWithClientInfo_SessionID_Call) Return(s string) *MockSessionWithClientInfo_SessionID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSessionWithClientInfo_SessionID_Call) RunAndReturn(run func() string) *MockSessionWithClientInfo_SessionID_Call {
	_c.Call.Return(run)
	return _c
}

// SetClientInfo provides a mock function for the type MockSessionWithClientInfo
func (_mock *MockSessionWithClientInfo) SetClientInfo(clientInfo mcp.Implementation) {
	_mock.Called(clientInfo)
	return
}

// MockSessionWithClientInfo_SetClientInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClientInfo'
type MockSessionWithClientInfo_SetClientInfo_Call struct {
	*mock.Call
}

// SetClientInfo is a helper method to define mock.On call
//   - clientInfo mcp.Implementation
func (_e *MockSessionWithClientInfo_Expecter) SetClientInfo(clientInfo interface{}) *MockSessionWithClientInfo_SetClientInfo_Call {
	return &MockSessionWithClientInfo_SetClientInfo_Call{Call: _e.mock.On("SetClientInfo", clientInfo)}
}

func (_c *MockSessionWithClientInfo_SetClientInfo_Call) Run(run func(clientInfo mcp.Implementation)) *MockSessionWithClientInfo_SetClientInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mcp.Implementation
		if args[0] != nil {
			arg0 = args[0].(mcp.Implementation)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionWithClientInfo_SetClientInfo_Call) Return() *MockSessionWithClientInfo_SetClientInfo_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionWithClientInfo_SetClientInfo_Call) RunAndReturn(run func(clientInfo mcp.Implementation)) *MockSessionWithClientInfo_SetClientInfo_Call {
	_c.Run(run)
	return _c
}

// NewMockSessionIdManager creates a new instance of MockSessionIdManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionIdManager(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockSessionIdManager {
	mock := &MockSessionIdManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionIdManager is an autogenerated mock type for the SessionIdManager type
type MockSessionIdManager struct {
	mock.Mock
}

type MockSessionIdManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionIdManager) EXPECT() *MockSessionIdManager_Expecter {
	return &MockSessionIdManager_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockSessionIdManager
func (_mock *MockSessionIdManager) Generate() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSessionIdManager_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockSessionIdManager_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *MockSessionIdManager_Expecter) Generate() *MockSessionIdManager_Generate_Call {
	return &MockSessionIdManager_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *MockSessionIdManager_Generate_Call) Run(run func()) *MockSessionIdManager_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSessionIdManager_Generate_Call) Return(s string) *MockSessionIdManager_Generate_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSessionIdManager_Generate_Call) RunAndReturn(run func() string) *MockSessionIdManager_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// Terminate provides a mock function for the type MockSessionIdManager
func (_mock *MockSessionIdManager) Terminate(sessionID string) (bool, error) {
	ret := _mock.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(sessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(sessionID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(sessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionIdManager_Terminate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Terminate'
type MockSessionIdManager_Terminate_Call struct {
	*mock.Call
}

// Terminate is a helper method to define mock.On call
//   - sessionID string
func (_e *MockSessionIdManager_Expecter) Terminate(sessionID interface{}) *MockSessionIdManager_Terminate_Call {
	return &MockSessionIdManager_Terminate_Call{Call: _e.mock.On("Terminate", sessionID)}
}

func (_c *MockSessionIdManager_Terminate_Call) Run(run func(sessionID string)) *MockSessionIdManager_Terminate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionIdManager_Terminate_Call) Return(isNotAllowed bool, err error) *MockSessionIdManager_Terminate_Call {
	_c.Call.Return(isNotAllowed, err)
	return _c
}

func (_c *MockSessionIdManager_Terminate_Call) RunAndReturn(run func(sessionID string) (bool, error)) *MockSessionIdManager_Terminate_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function for the type MockSessionIdManager
func (_mock *MockSessionIdManager) Validate(sessionID string) (bool, error) {
	ret := _mock.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(sessionID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(sessionID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(sessionID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionIdManager_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockSessionIdManager_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - sessionID string
func (_e *MockSessionIdManager_Expecter) Validate(sessionID interface{}) *MockSessionIdManager_Validate_Call {
	return &MockSessionIdManager_Validate_Call{Call: _e.mock.On("Validate", sessionID)}
}

func (_c *MockSessionIdManager_Validate_Call) Run(run func(sessionID string)) *MockSessionIdManager_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionIdManager_Validate_Call) Return(isTerminated bool, err error) *MockSessionIdManager_Validate_Call {
	_c.Call.Return(isTerminated, err)
	return _c
}

func (_c *MockSessionIdManager_Validate_Call) RunAndReturn(run func(sessionID string) (bool, error)) *MockSessionIdManager_Validate_Call {
	_c.Call.Return(run)
	return _c
}
