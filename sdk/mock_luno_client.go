// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sdk

import (
	"context"

	"github.com/luno/luno-go"
	"github.com/stretchr/testify/mock"
)

// NewMockLunoClient creates a new instance of MockLunoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLunoClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockLunoClient {
	mock := &MockLunoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLunoClient is an autogenerated mock type for the LunoClient type
type MockLunoClient struct {
	mock.Mock
}

type MockLunoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLunoClient) EXPECT() *MockLunoClient_Expecter {
	return &MockLunoClient_Expecter{mock: &_m.Mock}
}

// GetBalances provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) GetBalances(ctx context.Context, req *luno.GetBalancesRequest) (*luno.GetBalancesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 *luno.GetBalancesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetBalancesRequest) (*luno.GetBalancesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetBalancesRequest) *luno.GetBalancesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.GetBalancesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.GetBalancesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_GetBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalances'
type MockLunoClient_GetBalances_Call struct {
	*mock.Call
}

// GetBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.GetBalancesRequest
func (_e *MockLunoClient_Expecter) GetBalances(ctx interface{}, req interface{}) *MockLunoClient_GetBalances_Call {
	return &MockLunoClient_GetBalances_Call{Call: _e.mock.On("GetBalances", ctx, req)}
}

func (_c *MockLunoClient_GetBalances_Call) Run(run func(ctx context.Context, req *luno.GetBalancesRequest)) *MockLunoClient_GetBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.GetBalancesRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.GetBalancesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_GetBalances_Call) Return(getBalancesResponse *luno.GetBalancesResponse, err error) *MockLunoClient_GetBalances_Call {
	_c.Call.Return(getBalancesResponse, err)
	return _c
}

func (_c *MockLunoClient_GetBalances_Call) RunAndReturn(run func(ctx context.Context, req *luno.GetBalancesRequest) (*luno.GetBalancesResponse, error)) *MockLunoClient_GetBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderBook provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) GetOrderBook(ctx context.Context, req *luno.GetOrderBookRequest) (*luno.GetOrderBookResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderBook")
	}

	var r0 *luno.GetOrderBookResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetOrderBookRequest) (*luno.GetOrderBookResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetOrderBookRequest) *luno.GetOrderBookResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.GetOrderBookResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.GetOrderBookRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_GetOrderBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderBook'
type MockLunoClient_GetOrderBook_Call struct {
	*mock.Call
}

// GetOrderBook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.GetOrderBookRequest
func (_e *MockLunoClient_Expecter) GetOrderBook(ctx interface{}, req interface{}) *MockLunoClient_GetOrderBook_Call {
	return &MockLunoClient_GetOrderBook_Call{Call: _e.mock.On("GetOrderBook", ctx, req)}
}

func (_c *MockLunoClient_GetOrderBook_Call) Run(run func(ctx context.Context, req *luno.GetOrderBookRequest)) *MockLunoClient_GetOrderBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.GetOrderBookRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.GetOrderBookRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_GetOrderBook_Call) Return(getOrderBookResponse *luno.GetOrderBookResponse, err error) *MockLunoClient_GetOrderBook_Call {
	_c.Call.Return(getOrderBookResponse, err)
	return _c
}

func (_c *MockLunoClient_GetOrderBook_Call) RunAndReturn(run func(ctx context.Context, req *luno.GetOrderBookRequest) (*luno.GetOrderBookResponse, error)) *MockLunoClient_GetOrderBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicker provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) GetTicker(ctx context.Context, req *luno.GetTickerRequest) (*luno.GetTickerResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetTicker")
	}

	var r0 *luno.GetTickerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetTickerRequest) (*luno.GetTickerResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.GetTickerRequest) *luno.GetTickerResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.GetTickerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.GetTickerRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_GetTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicker'
type MockLunoClient_GetTicker_Call struct {
	*mock.Call
}

// GetTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.GetTickerRequest
func (_e *MockLunoClient_Expecter) GetTicker(ctx interface{}, req interface{}) *MockLunoClient_GetTicker_Call {
	return &MockLunoClient_GetTicker_Call{Call: _e.mock.On("GetTicker", ctx, req)}
}

func (_c *MockLunoClient_GetTicker_Call) Run(run func(ctx context.Context, req *luno.GetTickerRequest)) *MockLunoClient_GetTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.GetTickerRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.GetTickerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_GetTicker_Call) Return(getTickerResponse *luno.GetTickerResponse, err error) *MockLunoClient_GetTicker_Call {
	_c.Call.Return(getTickerResponse, err)
	return _c
}

func (_c *MockLunoClient_GetTicker_Call) RunAndReturn(run func(ctx context.Context, req *luno.GetTickerRequest) (*luno.GetTickerResponse, error)) *MockLunoClient_GetTicker_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrders provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) ListOrders(ctx context.Context, req *luno.ListOrdersRequest) (*luno.ListOrdersResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 *luno.ListOrdersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListOrdersRequest) (*luno.ListOrdersResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListOrdersRequest) *luno.ListOrdersResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.ListOrdersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.ListOrdersRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_ListOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrders'
type MockLunoClient_ListOrders_Call struct {
	*mock.Call
}

// ListOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.ListOrdersRequest
func (_e *MockLunoClient_Expecter) ListOrders(ctx interface{}, req interface{}) *MockLunoClient_ListOrders_Call {
	return &MockLunoClient_ListOrders_Call{Call: _e.mock.On("ListOrders", ctx, req)}
}

func (_c *MockLunoClient_ListOrders_Call) Run(run func(ctx context.Context, req *luno.ListOrdersRequest)) *MockLunoClient_ListOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.ListOrdersRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.ListOrdersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_ListOrders_Call) Return(listOrdersResponse *luno.ListOrdersResponse, err error) *MockLunoClient_ListOrders_Call {
	_c.Call.Return(listOrdersResponse, err)
	return _c
}

func (_c *MockLunoClient_ListOrders_Call) RunAndReturn(run func(ctx context.Context, req *luno.ListOrdersRequest) (*luno.ListOrdersResponse, error)) *MockLunoClient_ListOrders_Call {
	_c.Call.Return(run)
	return _c
}

// ListTrades provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) ListTrades(ctx context.Context, req *luno.ListTradesRequest) (*luno.ListTradesResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTrades")
	}

	var r0 *luno.ListTradesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListTradesRequest) (*luno.ListTradesResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListTradesRequest) *luno.ListTradesResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.ListTradesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.ListTradesRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_ListTrades_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTrades'
type MockLunoClient_ListTrades_Call struct {
	*mock.Call
}

// ListTrades is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.ListTradesRequest
func (_e *MockLunoClient_Expecter) ListTrades(ctx interface{}, req interface{}) *MockLunoClient_ListTrades_Call {
	return &MockLunoClient_ListTrades_Call{Call: _e.mock.On("ListTrades", ctx, req)}
}

func (_c *MockLunoClient_ListTrades_Call) Run(run func(ctx context.Context, req *luno.ListTradesRequest)) *MockLunoClient_ListTrades_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.ListTradesRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.ListTradesRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_ListTrades_Call) Return(listTradesResponse *luno.ListTradesResponse, err error) *MockLunoClient_ListTrades_Call {
	_c.Call.Return(listTradesResponse, err)
	return _c
}

func (_c *MockLunoClient_ListTrades_Call) RunAndReturn(run func(ctx context.Context, req *luno.ListTradesRequest) (*luno.ListTradesResponse, error)) *MockLunoClient_ListTrades_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactions provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) ListTransactions(ctx context.Context, req *luno.ListTransactionsRequest) (*luno.ListTransactionsResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 *luno.ListTransactionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListTransactionsRequest) (*luno.ListTransactionsResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.ListTransactionsRequest) *luno.ListTransactionsResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.ListTransactionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.ListTransactionsRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type MockLunoClient_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.ListTransactionsRequest
func (_e *MockLunoClient_Expecter) ListTransactions(ctx interface{}, req interface{}) *MockLunoClient_ListTransactions_Call {
	return &MockLunoClient_ListTransactions_Call{Call: _e.mock.On("ListTransactions", ctx, req)}
}

func (_c *MockLunoClient_ListTransactions_Call) Run(run func(ctx context.Context, req *luno.ListTransactionsRequest)) *MockLunoClient_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.ListTransactionsRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.ListTransactionsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_ListTransactions_Call) Return(listTransactionsResponse *luno.ListTransactionsResponse, err error) *MockLunoClient_ListTransactions_Call {
	_c.Call.Return(listTransactionsResponse, err)
	return _c
}

func (_c *MockLunoClient_ListTransactions_Call) RunAndReturn(run func(ctx context.Context, req *luno.ListTransactionsRequest) (*luno.ListTransactionsResponse, error)) *MockLunoClient_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// PostLimitOrder provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) PostLimitOrder(ctx context.Context, req *luno.PostLimitOrderRequest) (*luno.PostLimitOrderResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PostLimitOrder")
	}

	var r0 *luno.PostLimitOrderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.PostLimitOrderRequest) (*luno.PostLimitOrderResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.PostLimitOrderRequest) *luno.PostLimitOrderResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.PostLimitOrderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.PostLimitOrderRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_PostLimitOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLimitOrder'
type MockLunoClient_PostLimitOrder_Call struct {
	*mock.Call
}

// PostLimitOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.PostLimitOrderRequest
func (_e *MockLunoClient_Expecter) PostLimitOrder(ctx interface{}, req interface{}) *MockLunoClient_PostLimitOrder_Call {
	return &MockLunoClient_PostLimitOrder_Call{Call: _e.mock.On("PostLimitOrder", ctx, req)}
}

func (_c *MockLunoClient_PostLimitOrder_Call) Run(run func(ctx context.Context, req *luno.PostLimitOrderRequest)) *MockLunoClient_PostLimitOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.PostLimitOrderRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.PostLimitOrderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_PostLimitOrder_Call) Return(postLimitOrderResponse *luno.PostLimitOrderResponse, err error) *MockLunoClient_PostLimitOrder_Call {
	_c.Call.Return(postLimitOrderResponse, err)
	return _c
}

func (_c *MockLunoClient_PostLimitOrder_Call) RunAndReturn(run func(ctx context.Context, req *luno.PostLimitOrderRequest) (*luno.PostLimitOrderResponse, error)) *MockLunoClient_PostLimitOrder_Call {
	_c.Call.Return(run)
	return _c
}

// StopOrder provides a mock function for the type MockLunoClient
func (_mock *MockLunoClient) StopOrder(ctx context.Context, req *luno.StopOrderRequest) (*luno.StopOrderResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StopOrder")
	}

	var r0 *luno.StopOrderResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.StopOrderRequest) (*luno.StopOrderResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *luno.StopOrderRequest) *luno.StopOrderResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*luno.StopOrderResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *luno.StopOrderRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLunoClient_StopOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopOrder'
type MockLunoClient_StopOrder_Call struct {
	*mock.Call
}

// StopOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - req *luno.StopOrderRequest
func (_e *MockLunoClient_Expecter) StopOrder(ctx interface{}, req interface{}) *MockLunoClient_StopOrder_Call {
	return &MockLunoClient_StopOrder_Call{Call: _e.mock.On("StopOrder", ctx, req)}
}

func (_c *MockLunoClient_StopOrder_Call) Run(run func(ctx context.Context, req *luno.StopOrderRequest)) *MockLunoClient_StopOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *luno.StopOrderRequest
		if args[1] != nil {
			arg1 = args[1].(*luno.StopOrderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLunoClient_StopOrder_Call) Return(stopOrderResponse *luno.StopOrderResponse, err error) *MockLunoClient_StopOrder_Call {
	_c.Call.Return(stopOrderResponse, err)
	return _c
}

func (_c *MockLunoClient_StopOrder_Call) RunAndReturn(run func(ctx context.Context, req *luno.StopOrderRequest) (*luno.StopOrderResponse, error)) *MockLunoClient_StopOrder_Call {
	_c.Call.Return(run)
	return _c
}
